(require openssl racket/file)
(when (directory-exists? client-dir)
  (printf "'tester' directory exists, remove? ")
  (flush-output)
  (unless (regexp-match #rx"^ *[yY]" (read-line))
    (error "aborting"))
  (delete-directory/files client-dir))
(make-directory client-dir)
(current-directory client-dir)
(printf "Retrieving files...\n")
(define-values [i o]
  (ssl-connect server port (ssl-make-client-context)))
(fprintf o "~s\n" 'tester-get-client-files)
(flush-output o)
(define main-file
  (let ([files+contents (read i)])
    (unless (list? files+contents) (error "bad connection, aborting!"))
    (close-output-port o)
    (close-input-port i)
    (for ([f+c (in-list files+contents)])
      (call-with-output-file (car f+c) #:exists 'truncate
        (lambda (o) (write-bytes (cadr f+c) o))))
    (caar files+contents)))
(printf "Running...\n")
(dynamic-require main-file #f)
